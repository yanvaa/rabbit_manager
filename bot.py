import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from rabbit import Rabbit
from datetime import datetime
from aiogram.types import FSInputFile

BOT_TOKEN = "TOKEN"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

class State:
    ADD_NAME = 1
    ADD_GENDER = 2
    ADD_FATHER = 3

user_states = {}

@dp.message(Command("start"))
async def start_command_handler(message: types.Message):
    chat_name = message.chat.title if hasattr(message.chat, 'title') else (
        message.chat.username if hasattr(message.chat, 'username') else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    )
    
    Rabbit.register_chat(message.chat.id, chat_name)
    
    kb = [
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫—Ä–æ–ª–∏–∫–æ–≤", callback_data="list_rabbits")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–æ–ª–∏–∫–∞", callback_data="add_rabbit")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer_photo(
        caption="üê∞ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –∫—Ä–æ–ª–∏–∫–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        photo=FSInputFile("scheme.png"),
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "list_rabbits")
async def list_rabbits(callback: types.CallbackQuery):
    empty_rabbit = Rabbit(0)
    rabbits = empty_rabbit.rabbits_data.find({})

    if not rabbits:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–æ–ª–∏–∫–∞",
            callback_data="add_rabbit"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –í –º–µ–Ω—é",
            callback_data="menu"
        ))
        builder.adjust(1)
        
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∫—Ä–æ–ª–∏–∫–æ–≤ –ø—É—Å—Ç!",
            reply_markup=builder.as_markup()
        )
    else:
        builder = InlineKeyboardBuilder()
        
        for rabbit in sorted(rabbits, key=lambda x: x.get("id", 0)):
            if rabbit.get("is_empty", True): continue
            gender_emoji = "‚ôÇÔ∏è" if rabbit.get("gender") == "male" else "‚ôÄÔ∏è"
            name = rabbit.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
            cell_id = rabbit.get("id", "?")
            
            builder.add(InlineKeyboardButton(
                text=f"{name} {gender_emoji} (–∫–ª–µ—Ç–∫–∞ {cell_id})",
                callback_data=f"rabbit_{cell_id}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –í –º–µ–Ω—é",
            callback_data="menu"
        ))
        
        builder.adjust(1)
        
        await callback.message.edit_caption(
            caption="üìã –°–ø–∏—Å–æ–∫ –∫—Ä–æ–ª–∏–∫–æ–≤:",
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("rabbit_"))
async def show_rabbit(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[1])
    rabbit = Rabbit(rabbit_id)
    
    builder = InlineKeyboardBuilder()
    
    if not rabbit.is_empty:
        builder.add(InlineKeyboardButton(
            text="üíû –°–ª—É—á–∏—Ç—å",
            callback_data=f"breed_{rabbit_id}"
        ))
        
        if rabbit.gender == "female" and rabbit.last_breeding_date:
            builder.add(InlineKeyboardButton(
                text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–ª—É—á–∫—É",
                callback_data=f"reset_breed_{rabbit_id}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"edit_{rabbit_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=f"delete_{rabbit_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="list_rabbits"
    ))
    builder.adjust(1)
    
    await callback.message.edit_caption(
        caption=rabbit.get_message(),
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "add_rabbit")
async def add_rabbit_start(callback: types.CallbackQuery):
    user_states[callback.from_user.id] = {"state": State.ADD_NAME}
    
    await callback.message.edit_caption(
        caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—Ä–æ–ª–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await callback.answer()

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == State.ADD_NAME)
async def add_rabbit_name(message: types.Message):
    user_state = user_states[message.from_user.id]
    try:
        cell_id = int(message.text)
        user_state["cell_id"] = cell_id
        user_state["state"] = State.ADD_GENDER
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ôÇÔ∏è –°–∞–º–µ—Ü", callback_data="gender_male"),
                InlineKeyboardButton(text="‚ôÄÔ∏è –°–∞–º–∫–∞", callback_data="gender_female")
            ],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫—Ä–æ–ª–∏–∫–∞:",
            reply_markup=kb
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ (—á–∏—Å–ª–æ)")

@dp.callback_query(lambda c: c.data.startswith("gender_"))
async def add_rabbit_gender(callback: types.CallbackQuery):
    user_state = user_states.get(callback.from_user.id)
    if not user_state:
        await callback.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    
    gender = callback.data.split("_")[1]
    user_state["gender"] = gender
    user_state["state"] = State.ADD_FATHER
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—Ä–æ–ª–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ])
    )
    await callback.answer()

@dp.message(lambda message: user_states.get(message.from_user.id, {}).get("state") == State.ADD_FATHER)
async def add_rabbit_father(message: types.Message):
    user_state = user_states[message.from_user.id]
    name = message.text
    
    rabbit = Rabbit(user_state["cell_id"])
    rabbit.update_rabbit(
        name=name,
        id=user_state["cell_id"],
        gender=user_state["gender"],
        is_empty=False,
        date=datetime.now(),
        last_breeding_date=None,
        father=None
    )
    
    del user_states[message.from_user.id]
    
    await message.answer_photo(
        caption=f"‚úÖ –ö—Ä–æ–ª–∏–∫ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–µ—Ç–∫—É {user_state['cell_id']}!",
        photo=FSInputFile("scheme.png"),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu")]
        ])
    )

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_rabbit(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[1])
    
    try:
        rabbit = Rabbit(rabbit_id)
        
        if rabbit.is_empty:
            await callback.answer("–ö–ª–µ—Ç–∫–∞ —É–∂–µ –ø—É—Å—Ç–∞!")
            return
            
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É",
            callback_data=f"confirm_delete_{rabbit_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
            callback_data=f"rabbit_{rabbit_id}"
        ))
        
        await callback.message.edit_caption(
            caption=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–µ—Ç–∫—É {rabbit_id}?\n–ö—Ä–æ–ª–∏–∫ {rabbit.name} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—Ä–æ–ª–∏–∫–∞: {e}")
        await callback.message.edit_caption(
            caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"rabbit_{rabbit_id}")]
            ])
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def confirm_delete_rabbit(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[2])
    
    try:
        rabbit = Rabbit(rabbit_id)
        rabbit.is_empty = True
        rabbit.save_rabbit()

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –∫—Ä–æ–ª–∏–∫–æ–≤",
            callback_data="list_rabbits"
        ))
        builder.add(InlineKeyboardButton(
            text="üè† –í –º–µ–Ω—é",
            callback_data="menu"
        ))
        
        await callback.message.edit_caption(
            caption=f"‚úÖ –ö–ª–µ—Ç–∫–∞ {rabbit_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_caption(
            caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–µ—Ç–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"rabbit_{rabbit_id}")]
            ])
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("breed_"))
async def breed_rabbit_select(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[1])
    current_rabbit = Rabbit(rabbit_id)
    
    all_rabbits = list(current_rabbit.rabbits_data.find({"is_empty": False}))
    
    builder = InlineKeyboardBuilder()
    
    for rabbit_data in all_rabbits:
        if rabbit_data["id"] == rabbit_id:
            continue
            
        partner = Rabbit(rabbit_data["id"])
        
        if current_rabbit.gender != partner.gender:  # –†–∞–∑–Ω—ã–µ –ø–æ–ª—ã
            if partner.gender == "female":
                if partner.check_rabbit():
                    gender_emoji = "‚ôÄÔ∏è" if partner.gender == "female" else "‚ôÇÔ∏è"
                    builder.add(InlineKeyboardButton(
                        text=f"{partner.name} {gender_emoji} (–∫–ª–µ—Ç–∫–∞ {partner.id})",
                        callback_data=f"brabbit_breed_{rabbit_id}_{partner.id}"
                    ))
            else:
                gender_emoji = "‚ôÄÔ∏è" if partner.gender == "female" else "‚ôÇÔ∏è"
                builder.add(InlineKeyboardButton(
                    text=f"{partner.name} {gender_emoji} (–∫–ª–µ—Ç–∫–∞ {partner.id})",
                    callback_data=f"brabbit_breed_{rabbit_id}_{partner.id}"
                ))
    
    if builder.buttons:
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"rabbit_{rabbit_id}"
        ))
        builder.adjust(1)
        
        await callback.message.edit_caption(
            caption=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è {current_rabbit.name} ({'—Å–∞–º–∫–∏' if current_rabbit.gender == 'female' else '—Å–∞–º—Ü–∞'}):",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_caption(
            caption="‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—Ä–æ–ª–∏–∫–æ–≤ –¥–ª—è —Å–ª—É—á–∫–∏!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n- –ï—Å—Ç—å –∫—Ä–æ–ª–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞\n- –°–∞–º–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª—É—á–∫–µ (–ø—Ä–æ—à–ª–æ 30 –¥–Ω–µ–π)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"rabbit_{rabbit_id}")]
            ])
        )
    
    user_states[callback.from_user.id] = {
        "state": "BREED_SELECT",
        "rabbit_id": rabbit_id
    }
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("brabbit_breed_"))
async def breed_rabbit_confirm(callback: types.CallbackQuery):
    try:
        _, _, rabbit1_id, rabbit2_id = callback.data.split('_')
        rabbit1_id = int(rabbit1_id)
        rabbit2_id = int(rabbit2_id)
        
        rabbit1 = Rabbit(rabbit1_id)
        rabbit2 = Rabbit(rabbit2_id)
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ª—É—á–∫—É",
            callback_data=f"confirm_breed_{rabbit1_id}_{rabbit2_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"rabbit_{rabbit1_id}"
        ))
        
        message = (
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–ª—É—á–∏—Ç—å –∫—Ä–æ–ª–∏–∫–æ–≤?\n\n"
            f"üê∞ {rabbit1.name} ({'—Å–∞–º–∫–∞' if rabbit1.gender == 'female' else '—Å–∞–º–µ—Ü'}, –∫–ª–µ—Ç–∫–∞ {rabbit1.id})\n"
            f"üê∞ {rabbit2.name} ({'—Å–∞–º–∫–∞' if rabbit2.gender == 'female' else '—Å–∞–º–µ—Ü'}, –∫–ª–µ—Ç–∫–∞ {rabbit2.id})\n\n"
        )
        
        if rabbit1.gender == "female":
            if rabbit1.check_rabbit():
                message += "–°–∞–º–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª—É—á–∫–µ ‚úÖ"
            else:
                days_passed = (datetime.now() - rabbit1.last_breeding_date).days
                message += f"–°–∞–º–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞! –ü—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {days_passed} –∏–∑ 30 –¥–Ω–µ–π ‚ùå"
        elif rabbit2.gender == "female":
            if rabbit2.check_rabbit():
                message += "–°–∞–º–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª—É—á–∫–µ ‚úÖ"
            else:
                days_passed = (datetime.now() - rabbit2.last_breeding_date).days
                message += f"–°–∞–º–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞! –ü—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {days_passed} –∏–∑ 30 –¥–Ω–µ–π ‚ùå"
        
        await callback.message.edit_caption(
            caption=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–ª—É—á–∫–∏: {e}")
        await callback.message.edit_caption(
            caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_rabbits")]
            ])
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_breed_"))
async def process_breeding(callback: types.CallbackQuery):
    try:
        _, _, rabbit1_id, rabbit2_id = callback.data.split('_')
        rabbit1_id = int(rabbit1_id)
        rabbit2_id = int(rabbit2_id)
        
        rabbit1 = Rabbit(rabbit1_id)
        rabbit2 = Rabbit(rabbit2_id)
        
        success = False
        if rabbit1.gender != rabbit2.gender:
            female = rabbit1 if rabbit1.gender == "female" else rabbit2
            if female.check_rabbit():
                female.last_breeding_date = datetime.now()
                female.save_rabbit()
                success = True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if success:
            message = (
                "‚úÖ –°–ª—É—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n"
                f"–°–∞–º–∫–∞ {female.name} —Ç–µ–ø–µ—Ä—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π —Å–ª—É—á–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π."
            )
        else:
            message = (
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–ª—É—á–∫—É!\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "- –ö—Ä–æ–ª–∏–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª–∞\n"
                "- –°–∞–º–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª—É—á–∫–µ\n"
                "- –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"
            )
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –∫—Ä–æ–ª–∏–∫–æ–≤",
            callback_data="list_rabbits"
        ))
        if success:
            builder.add(InlineKeyboardButton(
                text="üê∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–º–∫—É",
                callback_data=f"rabbit_{female.id}"
            ))
        
        await callback.message.edit_caption(
            caption=message,
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª—É—á–∫–∏: {e}")
        await callback.message.edit_caption(
            caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª—É—á–∫–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="list_rabbits")]
            ])
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("reset_breed_"))
async def reset_breeding_start(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[2])
    rabbit = Rabbit(rabbit_id)
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å",
        callback_data=f"confirm_reset_{rabbit_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
        callback_data=f"rabbit_{rabbit_id}"
    ))
    
    last_breeding = rabbit.last_breeding_date.strftime("%Y-%m-%d") if rabbit.last_breeding_date else "–Ω–µ –±—ã–ª–æ"
    
    await callback.message.edit_caption(
        caption=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—É —Å–ª—É—á–∫–∏ –¥–ª—è {rabbit.name}?\n–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–ª—É—á–∫–∏: {last_breeding}\n–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–∞–º–∫–∞ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–æ–π –∫ —Å–ª—É—á–∫–µ.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_reset_"))
async def confirm_reset_breeding(callback: types.CallbackQuery):
    rabbit_id = int(callback.data.split("_")[2])
    rabbit = Rabbit(rabbit_id)
    
    if rabbit.reset_breeding():
        message = f"‚úÖ –î–∞—Ç–∞ —Å–ª—É—á–∫–∏ –¥–ª—è {rabbit.name} —Å–±—Ä–æ—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π —Å–ª—É—á–∫–µ."
    else:
        message = "‚ùå –û—à–∏–±–∫–∞! –ú–æ–∂–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∞–º–æ–∫."
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üîô –ö –∫–∞—Ä—Ç–æ—á–∫–µ –∫—Ä–æ–ª–∏–∫–∞",
        callback_data=f"rabbit_{rabbit_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üìã –ö —Å–ø–∏—Å–∫—É –∫—Ä–æ–ª–∏–∫–æ–≤",
        callback_data="list_rabbits"
    ))
    
    await callback.message.edit_caption(
        caption=message,
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_action(callback: types.CallbackQuery):
    if callback.from_user.id in user_states:
        del user_states[callback.from_user.id]
    
    await callback.message.edit_caption(
        caption="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu")]
        ])
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    if callback.from_user.id in user_states:
        del user_states[callback.from_user.id]
    
    await start_command_handler(callback.message)
    await callback.answer()

async def check_pregnant_rabbits():
    while True:
        try:
            pregnant_females = Rabbit.get_pregnant_females()
            notifications = []
            
            for female in pregnant_females:
                status = female.get_pregnancy_status()
                if status == "okrol":
                    notifications.append(
                        f"‚ö†Ô∏è –°–∞–º–∫–∞ {female.name} (–∫–ª–µ—Ç–∫–∞ {female.id}) –¥–æ–ª–∂–Ω–∞ –æ–∫—Ä–æ–ª–∏—Ç—å—Å—è "
                        f"–≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏! (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å–ª—É—á–∫–∞ {female.last_breeding_date.strftime('%Y-%m-%d')})"
                    )
                elif status == "preparing":
                    days_left = 28 - (datetime.now() - female.last_breeding_date).days
                    notifications.append(
                        f"‚ÑπÔ∏è –°–∞–º–∫–∞ {female.name} (–∫–ª–µ—Ç–∫–∞ {female.id}) –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ–∫—Ä–æ–ª—É. "
                        f"–î–æ —Ä–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å ~{days_left} –¥–Ω–µ–π."
                    )
            
            if notifications:
                
                for admin_id in Rabbit.get_active_chats():
                    try:
                        await bot.send_message(
                            admin_id["chat_id"],
                            "üêá –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∞–º–∫–∞—Ö:\n\n" + "\n\n".join(notifications)
                        )
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ admin {admin_id}: {e}")
            
            await asyncio.sleep(12 * 60 * 60)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_pregnant_rabbits: {e}")
            await asyncio.sleep(60)

async def main():
    asyncio.create_task(check_pregnant_rabbits())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
